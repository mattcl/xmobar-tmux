language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    # TODO change the project name
    - PROJECT_NAME=xmobar-tmux
    # TODO comment out this variable if you don't want to build .deb packages on all the targets.
    - MAKE_DEB=yes
    # TODO update these two variables. They are part of the .deb package metadata
    - DEB_MAINTAINER="Matt Chun-Lum <matt@questionable.engineering>"
    - DEB_DESCRIPTION="Display current tmux info"

# AFAICT There are a few ways to set up the build jobs. This one is not the DRYest but I feel is the
# easiest to reason about.
# TODO Feel free to remove the channels/targets you don't need
# NOTE Make *sure* you don't remove a reference (&foo) if you are going to dereference it (*foo)
matrix:
  include:
    # Stable channel
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-gnu
      addons:
        apt:
          sources: &x86_unknown_linux_gnu_sources
            - kalakris-cmake
          packages: &x86_unknown_linux_gnu
            # Cross compiler and cross compiled C libraries
            - gcc-multilib
            - libelf-dev
            - libdw-dev
            - cmake
            - binutils-dev
    # Beta channel
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-gnu
      addons:
        apt:
          sources: *x86_unknown_linux_gnu_sources
          packages: *x86_unknown_linux_gnu
    # Nightly channel
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-gnu
      addons:
        apt:
          sources: *x86_unknown_linux_gnu_sources
          packages: *x86_unknown_linux_gnu

  allow_failures:
    # TODO You might need to allow failures for some target on some channel for some reason. Below
    # there's one (commented out) example of how to do that. Just change the OS, channel and TARGET
    # as needed.
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-gnu

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  api_key:
    secure: B47JJjK5HMohPVoVA4IaJTX2S6fz9gx66ENqyCLfzdRGam0VZpa5aHRcg/zvCSb7pWFfmFh0Sfe0j2iHssNS6JQIeU2pJQfD2RMEdnGXSOyxmreX+DxvaMkf2UHi3jTaKAHDf6M1/jOCcjrCCbhUI4RQLWsJiden1lO+Mpk8XiPt8ohWl8meZOssBhBl1mSMoWJbJYGLZYLJy+xpjF7roJK/fK4glvWnZLXJdPLpEX+z7HjViGpOHItLuLWxn3SfU0wVg1SnyJU67ZVpRfqBaWtd7tkmPrai9P2Iy5Wh6K0MwJeVJQHsNmuSIGEiH8bf9XUACkbOBrH0OmVC04QxDHwDUbd5MJiSPrhDwhkEtcatnchVQSp/EEQvFiiro1G272usbPq/evXVNjuWJQH6SBeFVBxRhTPlP9vV0ZEYnmfXsa1Nc98f+aZ+fOR7XZyZfE7n7VbD+gtVYv0HWqexx7DPP9knvIm3DquEMW4Dt3RBwrUgbZdHRQDSaYzSAEBPFxxlOhIW91kzK035Xpscu7+IDZKfxemefukDP9qY0gMGzRDHrfQz7F4OL/5RuELF/fjai9/1GQnT9Fpvbakh6Rd+oE0u0yKXFxenqYX3UFBmHPkD0x02EeIEeN1vZTBXwzik2TENybbNpdLybPj9uM4OfRVxVQVik/HB/eGJGuY=
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  # don't delete the artifacts from previous phases
  skip_cleanup: true
  # deploy when a new tag is pushed
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    # TODO you may want to pick a different channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true

branches:
  only:
    # Pushes and PR to the master branch
    - master
    # IMPORTANT Ruby regex to match tags. Required, or travis won't trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/

notifications:
  email:
    on_success: never
